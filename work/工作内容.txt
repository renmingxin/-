a)	列举工作内容：
	1.BI1.0数据分析平台前端PC端,移动端的生产与修改维护。
	2.集群系统前端的生产与修改维护。
	3.GM系统前端修改维护。
	
b)	学到的知识点：
	1.在前端项目架构上的理解更加的深入，从页面、脚本、路由、状态管理、工具等。
	2.自定义组件复用编写技巧。
	3.功能模块的高度抽离。
	
c)	工作中出现的问题，如何解决的问题：
	1.移动端框架的调研和路由切换问题。
		如何解决：
			1.移动端框架有很多种，挑选适合自己业务需求的框架，从社区活跃程度到技术成本再到美观最后选择了谷歌的museUI框架。
			2.前端配置顶级路由用来区分pc和移动端，在登录页面的方法里面判断你所用的设备是否是移动端的设备。再进行加载不同的路由。
			
	2.集群项目服务端的推送在短时间内推送大量数据有前端捕捉不到数据的情况发生。
		如何解决：
			1.首先和山哥讨论是否是vue框架在设置观察者方法的时候有丢失的情况，然后把js的引用类型都走了一遍发现对象类型也并不能根除这个问题，最后选择用中间件缓存数据的方法，
			在500毫秒里面往外拿值，解决了数据遗漏的问题。
	3.按策划的要求优化了echarts的数据单位的显示。
		如何解决：
			1.在echarts本身的demo中没有找到有合适的能够在同一组数据底下把百分比和准确的单位都放入一个图里面的方法。查询api文档发现有个暴露的formatter格式化的方法根据策划的业务需求重写了显示层的方法。
	4.echarts散点图二次框选操作。
		如何解决：
			1.查询了大量的echarts的API从地图图表中抠下了框选组件，由于官网散点图实例没有现有的demo，在echarts的setOptions里面返回echarts的实例在鼠标操作回调里面增加了这个方法，使组件可以使用。
	5.解决了iview不能通过二次计算后的数据进行排序，只能用初始值排序的bug。
		如何解决：
			1.一开始想到的是把获取的数据重新在格式化包装一遍成框架官网规定的数据结构，后来发觉这样解决耗时也耗力。然后又想到不改变数据格式，能否重写框架本身的排序方法使得监听的是我们计算后的数据，
			后来发现也特别的耗时，最后发现可以计算后的值重新赋给表格中的参数值可以完美解决这个问题。最后得以解决。

d)	列举有代表性的Bug和优化，解决方法：
	1.webpack打包项目优化缩减了百分之70，增加了能够查看组件大小的插件，管理项目能清晰，在生产环境压缩代码至一行增强安全性。
		如何解决：
			1.最先使用uglifyjs-webpack-plugin插件去压缩JS的代码使得代码在打包的时候压缩成一行，能够节省空间和增加一些安全性，但发现这个插件是单线程压缩代码。
			也就是说多个js文件被压缩，他需要每个文件都进行压缩。使得正式环境打包速度很慢。最后使用webpack-parallel-uglify-plugin这个插件，可以多个子进程去解析js和css，就可以很快的压缩代码了。
			2.本身bi项目是全用npm包管理的他会下载很多冗余和其他可能用不到的代码。在这里我就全部用cdn引入他们所要的js资源和css资源。并且挑选用min后缀名的，然后开发环境有些提示不正确但是在正式环境时候加载速度得到了显著的提升，并大大缩小了dist目录的大小。
			3.引入了一个webpack-bundle-analyzer包管理插件，可以很清晰的用图形化展示每个组件的大小和里面的方法，可以方便管理。	
	2.一些移动端的优化和适配
		如何解决：
			1.首先根据不同手机分辨率的大小，长宽的规格一律不会使用pc的px固定像素进行编写，一般会使用flex布局和百分比，还有css3新属性vh和vw,rem等。
			2.在index.html入口文件中，添加了几个强制运行的meta代码，如强制使用webkit内核渲染，避免IE兼容模式，全屏模式隐藏地址栏，和不允许手指误触双击放大缩小的命令等。
			
	3.在BI大量用表格的组件时取消Vue框架的观察者模式和双向绑定功能，让数据更干净。
		如何解决：
			1.因为vue会给每个数据都增加监听方法，使得每次加载数据都会变得不流畅且冗余。在获取数据的时候重新深度克隆一套一模一样的数据，避免给每个数据添加方法，使得数据保持干净。
		
	4.取消重写iview框架的一些权重较高的样式使他不会影响到项目本身的架构。
		如何解决：
			1.这里纠结了很长时间，因为使用UI框架的好处就是成型快，但是对于不同的业务需求不得不去修改它的样式，然后他样式权重却很高，一开始在总style样式里面覆盖发现全项目的属性值都会改变，查阅很多资料发现css3属性有个>>>深度监听的方法可以修改它，用时需要给他的父级多添加一个属性而已。
	
	5.根据项目需求写了一套时间转换的公共工具类方法。包含常见的时间转化所有的格式和日期与日期之间的计算。
		如何解决：	
			1.由于不管是搜索组件用到的时间还是展示层表格用到的时间格式都需要有一定的转换才能达到我们要的时间格式，然后写了一套基于我们业务需求的时间转换格式的工具类方法。
			
	6.集群一些旧组件耦合太高需要进行重写，及其他的公共方法的抽离。
	
e)	自我总结：
	在公司近1年的时间里，看到了自己很大的变化和成长，最大的收获是遇到问题和需求不是一味的去抱怨和求助，能够独立自主的完成公司安排的业务和需求并在此基础上优化和完善。
	公司是一个技术氛围很浓重的公司，跟我入职的上家比起来确实氛围强了太多，经常都会有非常激烈的技术讨论，身处这种环境自己也会不由自主的想在技术上面精益求精。
	不管公司的大数据全栈方向和我自己本身的前端方向我都有很长的路要走，在技术更迭日益迅速的今天，逆水行舟不进则退，保持对技术的强烈兴趣才能在这条路上走的更远更宽阔。
