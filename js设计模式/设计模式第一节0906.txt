单例模式，抽象工厂模式，工厂模式

设计模式的六大原则：
1.降低代码的复杂程度，减少耦合，增强复用性，降低代码的开发维护扩展成本。
2.开闭原则OCP



耦合：耦合关系是指某两个事物之间如果存在一种相互作用、相互影响的关系，那么这种关系就称作“耦合关系”。
复杂度：高，代码质量不高，可维护性差，复用性差，不易扩展。
耦合度：无不可能，低合理，过高不容易维护，但复用性和扩展性是好的。


开发的流程
有限降低复杂度，尽量降低耦合度
1.利用单一职责原则，开闭原则，里氏代换原则降低复杂度。
2.通过迪米特法则减少耦合度
3.通过依赖倒置原则消除可以没有的耦合
↓↓↓↓↓↓↓↓↓↓↓↓↓
单一职责原则：single Responsibility principle
（一个方法制作一件事情，请求数据的函数就不要渲染数据了，吃上厕所别用同一个地方）

开闭原则OCP:扩展

里氏代换原则 L Subsituation principle
任何基类出现的地方，子类一定可以出现。通俗来讲就是：自雷可以扩展父类的功能，但不能改变父类原有的功能。
一个父类可以访问的接口，父类忙着其他事情，子类可以去访问。

迪米特法则（最小知道原则）LD
一个接口和一个方法，传入的参数越少越好。降低耦合度的同时也会让复杂程度降低。
谍战片中的间谍，两个同一伙间谍互相不知道，为什么要这样呢，为了最大程度减少伤害，死只死一条线上的人。形成的关联越少越好依赖最少。

接口分离原则ISP
把大接口拆分小接口们不能一个接口全部实现增删改查
比如我们写作业，要细分成，写数学，写英语，写语文，同事降低耦合度了